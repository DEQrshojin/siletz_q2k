cCov <- modify_met(df = cCov, strD = '2017-08-05', endD = '2017-08-14',
mdfy = c(20, 20, 70, 70, rep(90, 6)))
# write.csv(x = airT, file = paste0(path, 'air_temp_', sffx, '.csv'), row.names = F)
# write.csv(x = dwpT, file = paste0(path, 'dwp_temp_', sffx, '.csv'), row.names = F)
write.csv(x = cCov, file = paste0(path, 'cld_covr_MDFY_', sffx, '.csv'), row.names = F)
rm(list = ls()); cat('\014')
source('d:/siletz_q2k/04_scripts/cal_functions_q2k.R')
# ________________________________________________________________________----
# PROCESS OBSERVATIONS FOR PEST ----
strD <- '2017-09-08'; endD <- '2017-10-16'
HSPF <- 'D:/siletz/outputs/q2k_noSTP'
obs_CW <- obs4PEST(strD, endD, HSPF = HSPF)
# ________________________________________________________________________----
# RUN SUPPLEMENTAL CALIBRATION SCRIPTS ----
# For temperature
rm(list=ls()); cat("\014")
source('d:/siletz_q2k/04_scripts/cal_functions_q2k.R')
nDir = 'wq_82'
dir  = nDir
mOut = 'D:/siletz_q2k/08_pest/03_wq/01_cw_cal'
wudy = 4
strD = '2017-07-07'; endD = '2017-08-29'
strD = '2017-07-11'; endD = '2017-08-29'
HSPF = 'D:/siletz/outputs/q2k_noSTP'
nDir <- paste0('D:/siletz_q2k/06_figures', '/', nDir)
if (!dir.exists(nDir)) {dir.create(nDir)}
obs_CW <- obs4PEST(strD, endD, HSPF)
# Reduce the data frame and plot!
oOut <- obs_CW[['obs']][, c(2, 3, 6, 5)]
suppressMessages(library(ggplot2)); suppressMessages(library(lubridate))
suppressMessages(library(reshape2))
# ________________________________________________________________________----
# Load and organize the data ----
# Bring in station reach match
rows <- read.csv('D:/siletz_q2k/05_calib/rhdr.csv', stringsAsFactors = F)
# ________________________________________________________________________----
# Process model data ----
mOut <- read_q2k_out(mOut)
mOut <- mOut[, c(  1,   3,   4,   7,  24,  59,  12,  31,  35,   9,  15)]
names(mOut) <- c('rch', 'tme', 'tmp', 'doc', 'phX', 'rea', 'nox', 'tpX', 'toc',
'bod', 'cha')
# Remove warm-up days
if(!is.null(wudy)) {
mOut <- mOut[which(mOut$tme >= wudy), ]; mOut$tme <- mOut$tme - wudy
}
# Time - convert from days to seconds and convert to POSIXct
mOut$tme <- as.POSIXct(mOut$tme * 86400, origin = strD, tz = 'America/Los_Angeles') +
hours(7)
# Convert nitrate and phosphate from ug/L to mg/L
for (i in 7 : 8) {mOut[, i] <- mOut[, i] / 1000}
# Remove reach 00 (headwaters)
mOut <- mOut[which(mOut$rch != 0), ]
# Melt to long
mOut <- melt(mOut, id.vars = c('tme', 'rch'), variable.name = 'par',
value.name = 'val'); mOut$par <- as.character(mOut$par)
# ________________________________________________________________________----
# Process observations ----
names(oOut) <- c('tme', 'rch', 'par', 'val'); oOut$rch <- as.numeric(oOut$rch)
# Seperate the HSPF data and monitoring data
hNut <- oOut[which(oOut$par %in% c('noH', 'tpH')), ]
oOut <- oOut[-which(oOut$par %in% c('noH', 'tpH')), ]
# ________________________________________________________________________----
# Prep combined data for plotting ----
# Create a column in both for source (model/observation); bind the tables
mOut$src <- 'mod'; oOut$src <- 'obs'; dt <- rbind(mOut, oOut)
# Fix TP and pH for Obs -- switch x w/ X
dt$par <- ifelse(dt$par == 'tpx', 'tpX', ifelse(dt$par == 'phx', 'phX', dt$par))
# ________________________________________________________________________----
# Send dt out for error statistics and calculations ----
mtrc <- wq_metrics(dt = dt, dir = nDir)
# Parameter switch
pars <- data.frame(pr1 = c('tmp', 'doc', 'phX', 'rea', 'nox', 'tpX', 'toc', 'bod', 'cha'),
pr2 = c('Temperature', 'Dissolved Oxygen', 'pH', 'Reaeration',
'Nitrate', 'Total Phosphorus', 'Total Organic Carbon',
'Carbon BOD', 'Chlorophyll a'),
unt = c('oC', 'mg/L', 'su', '/day', 'mg/L', 'mg/L', 'mg/L',
'mg/L', 'ug/L'))
pars <- pars[order(pars$pr1), ]
# Create three different columns: mean/min/max for longitudinal plots
dd <- dt; dd$dte <- floor_date(dd$tme, 'day')
fncs <- c('mean', 'min', 'max'); ds <- list()
for (i in 1 : length(fncs)) {
ds[[i]] <- aggregate(dd$val, by <- list(dd$rch, dd$dte, dd$par, dd$src),
fncs[i], na.rm = T)
ds[[i]]$stt <- fncs[i]
}
dd <- rbind(ds[[1]], ds[[2]], ds[[3]])
names(dd) <- c('rch', 'dte', 'par', 'src', 'val', 'stt')
# Bring in river mile for plotting
dt <- merge(dt, rows[, c(3, 4, 1)], by.x = 'rch', by.y = 'q2kR', all.x = T,
all.y = F)
dt <- dt[order(dt$par), ]
dd <- merge(dd, rows[, c(3, 4, 1)], by.x = 'rch', by.y = 'q2kR', all.x = T,
all.y = F)
# Remove last day
dd <- dd[which(dd$dte != max(dd$dte, na.rm = T)), ]; dd <- dd[order(dd$par), ]
# Tally the days and determine number of groups
days <- unique(dd$dte); days <- days[order(days)];
nGrp <- ceiling(length(days) / 10); grps <- list()
# Create the groupings
for (i in 1 : nGrp) {
if (i != nGrp) {
grps[[i]] <- days[(i - 1) * 10 + 1 : 10]
} else {
grps[[i]] <- days[(1 + (i - 1) * 10) : length(days)]
}
}
# ________________________________________________________________________----
# Plot ----
lims <- data.frame(pars = c('bod', 'cha', 'doc', 'nox', 'phX', 'rea', 'tmp',
'toc', 'tpX'),
ymin = c( 0.00,  0.00,  5.00,  0.00,  6.00,  0.00,   5.0,
0.00,  0.00),
ymax = c( 1.00,  0.80,  15.0,  1.00, 12.00,  20.0,  30.0,
2.50,  0.15))
i = 3
unique(dt$par)[i]
# # Time series graphs (facet station)
datM <- dt[which(dt$par == unique(dt$par)[i] & dt$src == 'mod'), ]
datO <- dt[which(dt$par == unique(dt$par)[i] & dt$src == 'obs'), ]
# Longitudinal graphs (facet day) x = rch, y = val, facet = dte, group = stt
# Plots 10 facets at a time
ddM <- dd[which(dd$par == unique(dd$par)[i] & dd$src == 'mod'), ]
ddO <- dd[which(dd$par == unique(dd$par)[i] & dd$src == 'obs'), ]
nGrp
View(grps)
grps[[1]]
grps[[2]]
j = 1
ddMB <- ddM[which(ddM$dte %in% grps[[j]]), ]
ddMB <- dcast(ddMB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val')
ddOB <- ddO[which(ddO$dte %in% grps[[j]]), ]
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
geom_point(data = ddOB, aes(x = dst, y = val, group = stt),
color = 'darkred', stroke = 1.2, shape = 5, size = 1.1)  +
# geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 0.8) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank')
windows(12, 12)
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
geom_point(data = ddOB, aes(x = dst, y = val, group = stt),
color = 'darkred', stroke = 1.2, shape = 5, size = 1.1)  +
# geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 0.8) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '_points.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
dtes <- format(grps[[j]][c(1, length(grps[[j]]))], '%m%d')
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '_points.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
# geom_point(data = ddOB, aes(x = dst, y = val, group = stt),
#            color = 'darkred', stroke = 1.2, shape = 5, size = 1.1)  +
geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 0.8) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
View(ddOB)
# # Recast observations to wide
ddOB <- dcast(ddOB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val')
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
# geom_point(data = ddOB, aes(x = dst, y = val, group = stt),
#            color = 'darkred', stroke = 1.2, shape = 5, size = 1.1)  +
geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 0.8) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '_errbar.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
geom_point(data = ddOB, aes(x = dst, y = mean), shape = 5, size = 1.1)  +
geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 0.8) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '_errbar.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
geom_point(data = ddOB, aes(x = dst, y = mean), shape = 5, size = 2.0)  +
geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 1.2) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '_errbar.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
# ________________________________________________________________________----
# RUN SUPPLEMENTAL CALIBRATION SCRIPTS ----
# For temperature
rm(list=ls()); cat("\014")
source('d:/siletz_q2k/04_scripts/cal_functions_q2k.R')
nDir = 'wq_82'
dir  = nDir
mOut = 'D:/siletz_q2k/08_pest/03_wq/01_cw_cal'
wudy = 4
strD = '2017-07-11'; endD = '2017-08-29'
HSPF = 'D:/siletz/outputs/q2k_noSTP'
nDir <- paste0('D:/siletz_q2k/06_figures', '/', nDir)
if (!dir.exists(nDir)) {dir.create(nDir)}
obs_CW <- obs4PEST(strD, endD, HSPF)
# Reduce the data frame and plot!
oOut <- obs_CW[['obs']][, c(2, 3, 6, 5)]
rows <- read.csv('D:/siletz_q2k/05_calib/rhdr.csv', stringsAsFactors = F)
# ________________________________________________________________________----
# Process model data ----
mOut <- read_q2k_out(mOut)
mOut <- mOut[, c(  1,   3,   4,   7,  24,  59,  12,  31,  35,   9,  15)]
names(mOut) <- c('rch', 'tme', 'tmp', 'doc', 'phX', 'rea', 'nox', 'tpX', 'toc',
'bod', 'cha')
# Remove warm-up days
if(!is.null(wudy)) {
mOut <- mOut[which(mOut$tme >= wudy), ]; mOut$tme <- mOut$tme - wudy
}
# Time - convert from days to seconds and convert to POSIXct
mOut$tme <- as.POSIXct(mOut$tme * 86400, origin = strD, tz = 'America/Los_Angeles') +
hours(7)
# Convert nitrate and phosphate from ug/L to mg/L
for (i in 7 : 8) {mOut[, i] <- mOut[, i] / 1000}
# Remove reach 00 (headwaters)
mOut <- mOut[which(mOut$rch != 0), ]
# Melt to long
mOut <- melt(mOut, id.vars = c('tme', 'rch'), variable.name = 'par',
value.name = 'val'); mOut$par <- as.character(mOut$par)
# ________________________________________________________________________----
# Process observations ----
names(oOut) <- c('tme', 'rch', 'par', 'val'); oOut$rch <- as.numeric(oOut$rch)
# Seperate the HSPF data and monitoring data
hNut <- oOut[which(oOut$par %in% c('noH', 'tpH')), ]
oOut <- oOut[-which(oOut$par %in% c('noH', 'tpH')), ]
# ________________________________________________________________________----
# Prep combined data for plotting ----
# Create a column in both for source (model/observation); bind the tables
mOut$src <- 'mod'; oOut$src <- 'obs'; dt <- rbind(mOut, oOut)
# Fix TP and pH for Obs -- switch x w/ X
dt$par <- ifelse(dt$par == 'tpx', 'tpX', ifelse(dt$par == 'phx', 'phX', dt$par))
# ________________________________________________________________________----
# Send dt out for error statistics and calculations ----
# mtrc <- wq_metrics(dt = dt, dir = nDir)
# Parameter switch
pars <- data.frame(pr1 = c('tmp', 'doc', 'phX', 'rea', 'nox', 'tpX', 'toc', 'bod', 'cha'),
pr2 = c('Temperature', 'Dissolved Oxygen', 'pH', 'Reaeration',
'Nitrate', 'Total Phosphorus', 'Total Organic Carbon',
'Carbon BOD', 'Chlorophyll a'),
unt = c('oC', 'mg/L', 'su', '/day', 'mg/L', 'mg/L', 'mg/L',
'mg/L', 'ug/L'))
pars <- pars[order(pars$pr1), ]
# Create three different columns: mean/min/max for longitudinal plots
dd <- dt; dd$dte <- floor_date(dd$tme, 'day')
fncs <- c('mean', 'min', 'max'); ds <- list()
for (i in 1 : length(fncs)) {
ds[[i]] <- aggregate(dd$val, by <- list(dd$rch, dd$dte, dd$par, dd$src),
fncs[i], na.rm = T)
ds[[i]]$stt <- fncs[i]
}
dd <- rbind(ds[[1]], ds[[2]], ds[[3]])
names(dd) <- c('rch', 'dte', 'par', 'src', 'val', 'stt')
# Bring in river mile for plotting
dt <- merge(dt, rows[, c(3, 4, 1)], by.x = 'rch', by.y = 'q2kR', all.x = T,
all.y = F)
dt <- dt[order(dt$par), ]
dd <- merge(dd, rows[, c(3, 4, 1)], by.x = 'rch', by.y = 'q2kR', all.x = T,
all.y = F)
# Remove last day
dd <- dd[which(dd$dte != max(dd$dte, na.rm = T)), ]; dd <- dd[order(dd$par), ]
# Tally the days and determine number of groups
days <- unique(dd$dte); days <- days[order(days)];
nGrp <- ceiling(length(days) / 10); grps <- list()
# Create the groupings
for (i in 1 : nGrp) {
if (i != nGrp) {
grps[[i]] <- days[(i - 1) * 10 + 1 : 10]
} else {
grps[[i]] <- days[(1 + (i - 1) * 10) : length(days)]
}
}
# ________________________________________________________________________----
# Plot ----
lims <- data.frame(pars = c('bod', 'cha', 'doc', 'nox', 'phX', 'rea', 'tmp',
'toc', 'tpX'),
ymin = c( 0.00,  0.00,  5.00,  0.00,  6.00,  0.00,   5.0,
0.00,  0.00),
ymax = c( 1.00,  0.80,  15.0,  1.00, 12.00,  20.0,  30.0,
2.50,  0.15))
i = 1
# # Time series graphs (facet station)
datM <- dt[which(dt$par == unique(dt$par)[i] & dt$src == 'mod'), ]
datO <- dt[which(dt$par == unique(dt$par)[i] & dt$src == 'obs'), ]
plt1 <- ggplot(dat = datM, aes(x = tme, y = val)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + theme(axis.title.x = element_blank()) +
facet_wrap(. ~ rch, ncol = 2, labeller = label_both) +
scale_y_continuous(limits = c(lims$ymin[i], lims$ymax[i])) +
geom_point(data = datO, aes(x = tme, y = val),
color = 'darkred', stroke = 0.6, shape = 5, size = 0.9)
ggsave(filename = paste0('ts_', pars[i, 1], '.png'), plot = plt1, width = 17,
height = 11, path = nDir, units = 'in', dpi = 300)
# Longitudinal graphs (facet day) x = rch, y = val, facet = dte, group = stt
# Plots 10 facets at a time
ddM <- dd[which(dd$par == unique(dd$par)[i] & dd$src == 'mod'), ]
ddO <- dd[which(dd$par == unique(dd$par)[i] & dd$src == 'obs'), ]
j = 2
ddMB <- ddM[which(ddM$dte %in% grps[[j]]), ]
ddMB <- dcast(ddMB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
ddMB <- ddM[which(ddM$dte %in% grps[[j]]), ]
View(ddMB)
ddMB <- dcast(ddMB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
ddOB <- ddO[which(ddO$dte %in% grps[[j]]), ]
j = 1
ddMB <- ddM[which(ddM$dte %in% grps[[j]]), ]
ddMB <- dcast(ddMB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
ddOB <- ddO[which(ddO$dte %in% grps[[j]]), ]
View(ddOB)
View(ddMB)
ddOB <- dcast(ddOB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
ddOB
ddOB <- data.frame(dte = NULL, dst = NULL)
ddOB
?data.frame
ddOB <- data.frame(dte = 0, dst = 0, max = 0, mean = 0, min = 0)
ddOB
ddOB <- ddOB[-1, ]
ddOB
# ________________________________________________________________________----
# RUN SUPPLEMENTAL CALIBRATION SCRIPTS ----
# For temperature
rm(list=ls()); cat("\014")
source('d:/siletz_q2k/04_scripts/cal_functions_q2k.R')
nDir = 'wq_82'
dir  = nDir
mOut = 'D:/siletz_q2k/08_pest/03_wq/01_cw_cal'
wudy = 4
strD = '2017-07-11'; endD = '2017-08-29'
HSPF = 'D:/siletz/outputs/q2k_noSTP'
nDir <- paste0('D:/siletz_q2k/06_figures', '/', nDir)
if (!dir.exists(nDir)) {dir.create(nDir)}
obs_CW <- obs4PEST(strD, endD, HSPF)
# Reduce the data frame and plot!
oOut <- obs_CW[['obs']][, c(2, 3, 6, 5)]
rows <- read.csv('D:/siletz_q2k/05_calib/rhdr.csv', stringsAsFactors = F)
# ________________________________________________________________________----
# Process model data ----
mOut <- read_q2k_out(mOut)
mOut <- mOut[, c(  1,   3,   4,   7,  24,  59,  12,  31,  35,   9,  15)]
names(mOut) <- c('rch', 'tme', 'tmp', 'doc', 'phX', 'rea', 'nox', 'tpX', 'toc',
'bod', 'cha')
# Remove warm-up days
if(!is.null(wudy)) {
mOut <- mOut[which(mOut$tme >= wudy), ]; mOut$tme <- mOut$tme - wudy
}
# Time - convert from days to seconds and convert to POSIXct
mOut$tme <- as.POSIXct(mOut$tme * 86400, origin = strD, tz = 'America/Los_Angeles') +
hours(7)
# Convert nitrate and phosphate from ug/L to mg/L
for (i in 7 : 8) {mOut[, i] <- mOut[, i] / 1000}
# Remove reach 00 (headwaters)
mOut <- mOut[which(mOut$rch != 0), ]
# Melt to long
mOut <- melt(mOut, id.vars = c('tme', 'rch'), variable.name = 'par',
value.name = 'val'); mOut$par <- as.character(mOut$par)
# ________________________________________________________________________----
# Process observations ----
names(oOut) <- c('tme', 'rch', 'par', 'val'); oOut$rch <- as.numeric(oOut$rch)
# Seperate the HSPF data and monitoring data
hNut <- oOut[which(oOut$par %in% c('noH', 'tpH')), ]
oOut <- oOut[-which(oOut$par %in% c('noH', 'tpH')), ]
# ________________________________________________________________________----
# Prep combined data for plotting ----
# Create a column in both for source (model/observation); bind the tables
mOut$src <- 'mod'; oOut$src <- 'obs'; dt <- rbind(mOut, oOut)
# Fix TP and pH for Obs -- switch x w/ X
dt$par <- ifelse(dt$par == 'tpx', 'tpX', ifelse(dt$par == 'phx', 'phX', dt$par))
# ________________________________________________________________________----
# Send dt out for error statistics and calculations ----
# mtrc <- wq_metrics(dt = dt, dir = nDir)
# Parameter switch
pars <- data.frame(pr1 = c('tmp', 'doc', 'phX', 'rea', 'nox', 'tpX', 'toc', 'bod', 'cha'),
pr2 = c('Temperature', 'Dissolved Oxygen', 'pH', 'Reaeration',
'Nitrate', 'Total Phosphorus', 'Total Organic Carbon',
'Carbon BOD', 'Chlorophyll a'),
unt = c('oC', 'mg/L', 'su', '/day', 'mg/L', 'mg/L', 'mg/L',
'mg/L', 'ug/L'))
pars <- pars[order(pars$pr1), ]
# Create three different columns: mean/min/max for longitudinal plots
dd <- dt; dd$dte <- floor_date(dd$tme, 'day')
fncs <- c('mean', 'min', 'max'); ds <- list()
for (i in 1 : length(fncs)) {
ds[[i]] <- aggregate(dd$val, by <- list(dd$rch, dd$dte, dd$par, dd$src),
fncs[i], na.rm = T)
ds[[i]]$stt <- fncs[i]
}
dd <- rbind(ds[[1]], ds[[2]], ds[[3]])
names(dd) <- c('rch', 'dte', 'par', 'src', 'val', 'stt')
# Bring in river mile for plotting
dt <- merge(dt, rows[, c(3, 4, 1)], by.x = 'rch', by.y = 'q2kR', all.x = T,
all.y = F)
dt <- dt[order(dt$par), ]
dd <- merge(dd, rows[, c(3, 4, 1)], by.x = 'rch', by.y = 'q2kR', all.x = T,
all.y = F)
# Remove last day
dd <- dd[which(dd$dte != max(dd$dte, na.rm = T)), ]; dd <- dd[order(dd$par), ]
# Tally the days and determine number of groups
days <- unique(dd$dte); days <- days[order(days)];
nGrp <- ceiling(length(days) / 10); grps <- list()
# Create the groupings
for (i in 1 : nGrp) {
if (i != nGrp) {
grps[[i]] <- days[(i - 1) * 10 + 1 : 10]
} else {
grps[[i]] <- days[(1 + (i - 1) * 10) : length(days)]
}
}
# ________________________________________________________________________----
# Plot ----
lims <- data.frame(pars = c('bod', 'cha', 'doc', 'nox', 'phX', 'rea', 'tmp',
'toc', 'tpX'),
ymin = c( 0.00,  0.00,  5.00,  0.00,  6.00,  0.00,   5.0,
0.00,  0.00),
ymax = c( 1.00,  0.80,  15.0,  1.00, 12.00,  20.0,  30.0,
2.50,  0.15))
i = 1
j = 1
# # Time series graphs (facet station)
datM <- dt[which(dt$par == unique(dt$par)[i] & dt$src == 'mod'), ]
datO <- dt[which(dt$par == unique(dt$par)[i] & dt$src == 'obs'), ]
plt1 <- ggplot(dat = datM, aes(x = tme, y = val)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + theme(axis.title.x = element_blank()) +
facet_wrap(. ~ rch, ncol = 2, labeller = label_both) +
scale_y_continuous(limits = c(lims$ymin[i], lims$ymax[i])) +
geom_point(data = datO, aes(x = tme, y = val),
color = 'darkred', stroke = 0.6, shape = 5, size = 0.9)
plt1
# Longitudinal graphs (facet day) x = rch, y = val, facet = dte, group = stt
# Plots 10 facets at a time
ddM <- dd[which(dd$par == unique(dd$par)[i] & dd$src == 'mod'), ]
ddO <- dd[which(dd$par == unique(dd$par)[i] & dd$src == 'obs'), ]
ddMB <- ddM[which(ddM$dte %in% grps[[j]]), ]
ddMB <- dcast(ddMB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
ddOB <- ddO[which(ddO$dte %in% grps[[j]]), ]
# Recast observations to wide (if data are present otherwise don't plot)
if(nrow(ddOB) == 0) {
ddOB <- data.frame(dte = 0, dst = 0, max = 0, mean = 0, min = 0)
ddOB <- ddOB[-1, ]
} else {
ddOB <- dcast(ddOB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
}
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
geom_point(data = ddOB, aes(x = dst, y = mean), shape = 5, size = 2.0)  +
geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 1.2) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
dtes <- format(grps[[j]][c(1, length(grps[[j]]))], '%m%d')
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
j = 2
ddMB <- ddM[which(ddM$dte %in% grps[[j]]), ]
ddMB <- dcast(ddMB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
ddOB <- ddO[which(ddO$dte %in% grps[[j]]), ]
# Recast observations to wide (if data are present otherwise don't plot)
if(nrow(ddOB) == 0) {
ddOB <- data.frame(dte = 0, dst = 0, max = 0, mean = 0, min = 0)
ddOB <- ddOB[-1, ]
} else {
ddOB <- dcast(ddOB[, c(2, 5 : 7)], dte + dst ~ stt, value.var = 'val',
fun.aggregate = mean)
}
plt2 <- ggplot(dat = ddMB, aes(x = dst, y = mean)) +
geom_line(color = 'darkblue', size = 1.1) +
ylab(paste0(pars[i, 2], ' (', pars[i, 3], ')')) +
theme_bw() + facet_wrap(.~dte, ncol = 2) +
geom_point(data = ddOB, aes(x = dst, y = mean), shape = 5, size = 2.0)  +
geom_errorbar(data = ddOB, aes(ymin = min, ymax = max), width = 1.2) +
geom_ribbon(aes(ymin = ddMB$min, ymax = ddMB$max), alpha = 0.2,
fill = 'blue', linetype = 'blank'); plt2
dtes <- format(grps[[j]][c(1, length(grps[[j]]))], '%m%d')
ggsave(filename = paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '.png'),
plot = plt2, width = 17, height = 11, path = nDir, units = 'in',
dpi = 300, limitsize = F)
paste0('long_', pars[i, 1], '_', dtes[1], '_', dtes[2], '.png')
setwd("D:/siletz_q2k/04_scripts")
rm(list = ls()); cat('\014')
